from typing import Optional, List, Tuple

class CompareAndSwapError:
    current: bytes
    proposed: bytes

class SledBatch:
    def __init__(self) -> None: ...
    def insert(self, key: bytes, value: bytes) -> None: ...
    def remove(self: bytes) -> None: ...

class SledIter:
    def __iter__(self) -> SledIter: ...
    def __next__(self) -> Tuple[bytes, bytes]: ...

class SledDb:
    def __init__(self, path: str) -> None: ...
    def open_tree(self, name: bytes) -> SledTree: ...
    def drop_tree(self, name: bytes) -> bool: ...
    def size_on_disk(self) -> int: ...
    def insert(self, key: bytes, value: bytes) -> Optional[bytes]: ...
    def get(self, key: bytes) -> Optional[bytes]: ...
    def remove(self, key: bytes) -> Optional[bytes]: ...
    def clear(self) -> None: ...
    def all(self) -> List[(bytes, bytes)]: ...
    def compare_and_swamp(
        self, key: bytes, old: bytes, new: bytes
    ) -> Optional[CompareAndSwapError]: ...
    def checksum(self) -> int: ...
    def flush(self) -> int: ...
    def apply_batch(self, batch: SledBatch) -> None: ...
    def name(self) -> bytes: ...
    def is_empty(self) -> bool: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: bytes) -> bool: ...
    def __getitem__(self, key: bytes) -> Optional[bytes]: ...
    def __setitem__(self, key: bytes, value: bytes) -> None: ...
    def __delitem__(self, key: bytes) -> None: ...
    def __iter__(self) -> SledIter: ...

class SledTree:
    def insert(self, key: bytes, value: bytes) -> Optional[bytes]: ...
    def get(self, key: bytes) -> Optional[bytes]: ...
    def remove(self, key: bytes) -> Optional[bytes]: ...
    def clear(self) -> None: ...
    def all(self) -> List[(bytes, bytes)]: ...
    def compare_and_swamp(
        self, key: bytes, old: bytes, new: bytes
    ) -> Optional[CompareAndSwapError]: ...
    def checksum(self) -> int: ...
    def flush(self) -> int: ...
    def apply_batch(self, batch: SledBatch) -> None: ...
    def name(self) -> bytes: ...
    def is_empty(self) -> bool: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: bytes) -> bool: ...
    def __getitem__(self, key: bytes) -> Optional[bytes]: ...
    def __setitem__(self, key: bytes, value: bytes) -> None: ...
    def __delitem__(self, key: bytes) -> None: ...
    def __iter__(self) -> SledIter: ...
